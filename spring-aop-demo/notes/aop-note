AOP详解：https://blog.csdn.net/q982151756/article/details/80513340

1.AOP要解决的问题
    把横切关注点（指散布于应用中多处的功能）与业务逻辑相分离

    横切关注点可以被模块化为特殊的类，这些类被称为切面（aspect）。
    这样做有两个好处：
        首先，现在每个关注点都集中于一个地方，而不是分散到多处代码中；
        其次，服务模块更简洁，因为它们只包含主要关注点（或核心功能）的代码，而次要关注点的代码被转移到切面中了

2、Spring中基于XML的AOP配置

         1）.把通知bean也交给spring来管理
         2）.使用aop:config 标签表明开始AOP配置
         3）.使用aop：aspect标签表明配置切面
               id属性：是给切面提供的唯一标识
               ref属性：是指定通知bean的ID
         4）.在aop：aspect标签内部使用对应的标签来配置通知的类型
             我们现在的实例是让printlog在切入点方法执行之前执行，所以是迁址通知
             sop:before:表示前置通知
                 method属性：用于指定Logger类中哪个方法是前置的
                 pointcut属性：用于指定切入点表达式，该表达式的含义是指对业务层中哪些方法加强

         切入点表达式写法：

3、通知和切点共同定义了切面的全部内容------它是什么、在何时和何处完成其功能

=====================================
2020-02-08
4.AOP原理之---Spring动态代理机制
    https://blog.csdn.net/zs520ct/article/details/79593196
    动态代理的实现主要涉及两个类：
        1)InvocationHandler
        2)Proxy

    代理模式：
        https://www.cnblogs.com/teach/p/10763845.html
        静态代理：接口、代理类实现接口，处理被代理类的方法，可以在处理被代理类的逻辑中加入其他的业务处理逻辑

        JDK动态代理:
            https://blog.csdn.net/q982151756/article/details/80586894
            此方法中通过反射的方式调用被代理类的方法，可以在方法执行前或后进行别的处理

        Cglib动态代理:
            需要引入第三方类库
            CGLib动态代理是一个第三方实现的动态代理类库，
            不要求被代理类必须实现接口，它采用的是继承被代理类，
            使用其子类的方式，弥补了被代理类没有接口的不足
